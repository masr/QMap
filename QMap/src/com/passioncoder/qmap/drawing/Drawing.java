package com.passioncoder.qmap.drawing;

import java.awt.Color;
import java.awt.Font;

public class Drawing {
	// the maximal size of the drawing rectangle
	public static double maxActualXSize = 1600;
	public static double maxActualYSize = 1600;

	// the padding around the drawing rectangle for better looking
	public static double xPadding = 50;
	public static double yPadding = 50;

	// the actual size of the drawing rectangle
	public static double actualXSize = 0;
	public static double actualYSize = 0;

	// the longitude and latitude of the northwest point and the southeast point
	// of the drawing rectangle
	public static double northwestLongitude;
	public static double northwestLatitude;
	public static double southeastLongitude;
	public static double southeastLatitude;

	// the background color of the image
	public static Color backgroundColor = new Color(230, 245, 245);

	// the color of path
	public static Color[] colorArray = { new Color(180, 180, 180),
			new Color(58, 95, 205), Color.BLACK, Color.RED, Color.blue,
			Color.yellow, Color.pink, Color.CYAN, Color.ORANGE };

	// the title string of the image
	public static String titleString = "Schematic Map Generated By QMap";

	// the font of the tile string
	public static Font titleFont = new Font(Font.SANS_SERIF, Font.ITALIC, 13);

	// the font of the name of the places
	public static Font nameFont = new Font(Font.SANS_SERIF, Font.PLAIN, 10);

	// the factor of the point shape
	public static int outerDiameterOfKeyPoint = 8;
	public static int innerDiameterOfKeyPoint = 6;
	public static int diameterOfNonkeyPoint = 4;

	// draw line of every path on the drawing
	public static float lineThick = 3f;

	// the padding when drawing the name of one place
	public static int namePadding = 6;

	/**
	 * Set the actual size of the drawing rectangle
	 * 
	 * @param _actualXSize
	 *            The actual X size of the drawing rectangle
	 * 
	 * @param _actualYSize
	 *            The actual Y size of the drawing rectangle
	 */
	public static void setActualSize(double _actualXSize, double _actualYSize) {
		Drawing.actualXSize = _actualXSize;
		Drawing.actualYSize = _actualYSize;
	}

	/**
	 * Set the longitude and latitude of the northwest point of the drawing
	 * rectangle
	 * 
	 * @param _northwestLongitude
	 *            The longitude of the northwest point of the drawing rectangle
	 * 
	 * @param _northwestLatitude
	 *            The latitude of the northwest point of the drawing rectangle
	 */
	public static void setNorthwestLongitudeAndLatitude(
			double _northwestLongitude, double _northwestLatitude) {
		Drawing.northwestLongitude = _northwestLongitude;
		Drawing.northwestLatitude = _northwestLatitude;
	}

	/**
	 * Set the longitude and latitude of the southeast point of the drawing
	 * rectangle
	 * 
	 * @param _southeastLongitude
	 *            The longitude of the southeast point of the drawing rectangle
	 * 
	 * @param _southeastLatitude
	 *            The latitude of the southeast point of the drawing rectangle
	 */
	public static void setSoutheastLongitudeAndLatitude(
			double _southeastLongitude, double _southeastLatitude) {
		Drawing.southeastLongitude = _southeastLongitude;
		Drawing.southeastLatitude = _southeastLatitude;
	}

	/**
	 * Set the max actual size of the generated image
	 * 
	 * @param option
	 *            An integer which points out which kind of size of the image
	 *            the user want to get
	 */
	public static void setMaxActualSize(int option) {
		if (option == 0) {
			Drawing.maxActualXSize = Drawing.maxActualYSize = 800;
		} else if (option == 1) {
			Drawing.maxActualXSize = Drawing.maxActualYSize = 1600;
		} else {
			Drawing.maxActualXSize = Drawing.maxActualYSize = 800;
		}
	}

}
